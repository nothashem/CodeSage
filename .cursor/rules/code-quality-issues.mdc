---
description: 
globs: 
alwaysApply: false
---
# Code Quality Issues and Standards

## Critical Issues to Address

### 1. Tokenizer Implementation Issues

**Problem**: The [WordPieceTokenizer](mdc:src/tokenizer.py) has incomplete implementation with `NotImplementedError` in the `train()` method.

**Solution**: 
- Complete the WordPiece training algorithm implementation
- Follow the proper BPE-style merging approach
- Ensure consistent tokenization between training and inference

**Files to fix**:
- [src/tokenizer.py](mdc:src/tokenizer.py) - Complete WordPiece training
- [scripts/train_tokenizer.py](mdc:scripts/train_tokenizer.py) - Fix training algorithm

### 2. Code Duplication and Inconsistency

**Problem**: Multiple tokenizer implementations with overlapping functionality and inconsistent conventions.

**Solution**:
- Consolidate tokenizer implementations into a single, well-designed hierarchy
- Standardize special token conventions across all components
- Use consistent vocabulary formats

**Files to consolidate**:
- [src/tokenizer.py](mdc:src/tokenizer.py) - Base tokenizer
- [src/bpe_tokenizer.py](mdc:src/bpe_tokenizer.py) - BPE implementation
- [src/tokenizer_cli.py](mdc:src/tokenizer_cli.py) - CLI interface

### 3. Error Handling Standards

**Problem**: Poor error handling and validation throughout the codebase.

**Solution**:
- Add comprehensive input validation to all public methods
- Implement proper error handling for file operations
- Add meaningful error messages and logging

**Implementation guidelines**:
```python
def encode(self, text: str) -> List[str]:
    """Encode text to tokens with proper validation."""
    if not isinstance(text, str):
        raise TypeError("Input must be a string")
    if not text:
        return []
    # ... rest of implementation
```

### 4. Testing Requirements

**Problem**: Inadequate test coverage and missing edge cases.

**Solution**:
- Add comprehensive unit tests for all edge cases
- Implement integration tests between components
- Add performance benchmarks

**Test files to enhance**:
- [tests/test_tokenizer.py](mdc:tests/test_tokenizer.py) - Add edge cases
- [tests/test_bpe_tokenizer.py](mdc:tests/test_bpe_tokenizer.py) - Add comprehensive tests

### 5. Architecture Improvements

**Problem**: Tight coupling and poor separation of concerns.

**Solution**:
- Implement dependency injection for better testability
- Create clear interfaces between components
- Add configuration management system

**Files to refactor**:
- [src/model/transformer.py](mdc:src/model/transformer.py) - Decouple from tokenizer
- [scripts/train_model.py](mdc:scripts/train_model.py) - Improve architecture

## Code Standards

### Type Hints
- All public methods must have complete type hints
- Use `Optional`, `Union`, and `List` from typing module
- Add return type annotations

### Documentation
- All classes and public methods must have docstrings
- Follow Google docstring format consistently
- Include examples for complex methods

### Error Messages
- Use descriptive error messages
- Include context information when possible
- Log errors with appropriate levels

### Performance
- Avoid unnecessary computations in loops
- Use efficient data structures
- Profile critical paths

## Implementation Priority

1. **High Priority**: Complete WordPiece training implementation
2. **High Priority**: Fix tokenizer inconsistencies
3. **Medium Priority**: Add comprehensive error handling
4. **Medium Priority**: Improve test coverage
5. **Low Priority**: Architecture refactoring
